package com.vabv.crm.domain;

import static com.vabv.crm.domain.AssertUtils.bigDecimalCompareTo;
import static org.assertj.core.api.Assertions.assertThat;

public class ServiceOrderAsserts {

    /**
     * Asserts that the entity has all properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertServiceOrderAllPropertiesEquals(ServiceOrder expected, ServiceOrder actual) {
        assertServiceOrderAutoGeneratedPropertiesEquals(expected, actual);
        assertServiceOrderAllUpdatablePropertiesEquals(expected, actual);
    }

    /**
     * Asserts that the entity has all updatable properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertServiceOrderAllUpdatablePropertiesEquals(ServiceOrder expected, ServiceOrder actual) {
        assertServiceOrderUpdatableFieldsEquals(expected, actual);
        assertServiceOrderUpdatableRelationshipsEquals(expected, actual);
    }

    /**
     * Asserts that the entity has all the auto generated properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertServiceOrderAutoGeneratedPropertiesEquals(ServiceOrder expected, ServiceOrder actual) {
        assertThat(actual)
            .as("Verify ServiceOrder auto generated properties")
            .satisfies(a -> assertThat(a.getId()).as("check id").isEqualTo(expected.getId()));
    }

    /**
     * Asserts that the entity has all the updatable fields set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertServiceOrderUpdatableFieldsEquals(ServiceOrder expected, ServiceOrder actual) {
        assertThat(actual)
            .as("Verify ServiceOrder relevant properties")
            .satisfies(a -> assertThat(a.getCreationDate()).as("check creationDate").isEqualTo(expected.getCreationDate()))
            .satisfies(a -> assertThat(a.getStartDate()).as("check startDate").isEqualTo(expected.getStartDate()))
            .satisfies(a -> assertThat(a.getCompletionDate()).as("check completionDate").isEqualTo(expected.getCompletionDate()))
            .satisfies(a ->
                assertThat(a.getInitialCost())
                    .as("check initialCost")
                    .usingComparator(bigDecimalCompareTo)
                    .isEqualTo(expected.getInitialCost())
            )
            .satisfies(a ->
                assertThat(a.getAdditionalCost())
                    .as("check additionalCost")
                    .usingComparator(bigDecimalCompareTo)
                    .isEqualTo(expected.getAdditionalCost())
            )
            .satisfies(a ->
                assertThat(a.getTotalCost()).as("check totalCost").usingComparator(bigDecimalCompareTo).isEqualTo(expected.getTotalCost())
            )
            .satisfies(a -> assertThat(a.getNotes()).as("check notes").isEqualTo(expected.getNotes()))
            .satisfies(a -> assertThat(a.getStatus()).as("check status").isEqualTo(expected.getStatus()))
            .satisfies(a -> assertThat(a.getCreatedBy()).as("check createdBy").isEqualTo(expected.getCreatedBy()))
            .satisfies(a -> assertThat(a.getCreatedDate()).as("check createdDate").isEqualTo(expected.getCreatedDate()))
            .satisfies(a -> assertThat(a.getLastModifiedBy()).as("check lastModifiedBy").isEqualTo(expected.getLastModifiedBy()))
            .satisfies(a -> assertThat(a.getLastModifiedDate()).as("check lastModifiedDate").isEqualTo(expected.getLastModifiedDate()));
    }

    /**
     * Asserts that the entity has all the updatable relationships set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertServiceOrderUpdatableRelationshipsEquals(ServiceOrder expected, ServiceOrder actual) {
        assertThat(actual)
            .as("Verify ServiceOrder relationships")
            .satisfies(a -> assertThat(a.getType()).as("check type").isEqualTo(expected.getType()))
            .satisfies(a -> assertThat(a.getVehicle()).as("check vehicle").isEqualTo(expected.getVehicle()))
            .satisfies(a -> assertThat(a.getProducts()).as("check products").isEqualTo(expected.getProducts()));
    }
}
